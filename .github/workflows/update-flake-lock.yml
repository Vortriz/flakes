name: Update flake.lock
on:
  workflow_dispatch: # allows manual triggering
  schedule:
    - cron: '0 0 * * 0' # runs weekly on Sunday at 00:00

jobs:
  update-flake-lock:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      # - uses: easimon/maximize-build-space@master
      #   with:
      #     root-reserve-mb: 8192
      #     swap-size-mb: 1024
      #     build-mount-path: '/nix/store'
      #     remove-dotnet: true
      #     remove-android: true
      #     remove-haskell: true
      #     remove-codeql: true
      #     remove-docker-images: true

      - uses: actions/checkout@v3.3.0

      - name: Cache nvfetcher
        uses: actions/cache@v3.2.6
        with:
          path: ~/.local/share/nvfetcher
          key: ${{ runner.os }}-nvfetcher

      - uses: cachix/install-nix-action@v20
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - uses: cachix/cachix-action@v12
        with:
          name: misumisumi
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          skipPush: true

      - name: Update flake lock
        id: update
        uses: DeterminateSystems/update-flake-lock@v20
        with:
          pr-title: 'Update flake.lock' # Title of PR to be created
          pr-labels: | # Labels to be set on the PR
            dependencies
            automated
          git-author-name: 'misumiumi[bot]'
          git-author-email: 'misumisuminan@gmail.com'
          git-committer-name: 'misumiumi[bot]'
          git-committer-email: 'misumisuminan@gmail.com'

      - name: Commit README
        id: commit
        uses: stefanzweifel/git-auto-commit-action@v4
        if: steps.update.conclusion == 'success'
        with:
          commit_options: '--amend --no-edit'
          file_pattern: 'README.md'
          commit_user_name: 'misumiumi[bot]'
          commit_user_email: 'misumisuminan@gmail.com'
          commit_author: 'misumisumi[bot] <misumisuminan@gmail.com>'

      - name: Approve PR
        id: pr
        if: steps.commit.conclusion == 'success'
        run: gh pr review --approve ${{ steps.update.outputs.pull-request-number }}

      - name: Auto merge
        if: steps.pr.conclusion == 'success'
        run: gh pr merge --merge --auto ${{ steps.update.outputs.pull-request-number }}

      - name: Close PR
        if: steps.update.conclusion == 'failure'
        run: gh pr close ${{ steps.update.outputs.pull-request-number }}